blocks=Constant;Variable;ListStart;ListEnd;\
Forward;Backward;Left;Right;SetHeading;SetTowards;SetPosition;PenDown;PenUp;ShowTurtle;HideTurtle;Home;ClearScreen;SetPenColor;SetPenSize;SetShape;Stamp;ClearStamps;\
XCoordinate;YCoordinate;Heading;IsPenDown;IsShowing;GetPenColor;GetShape;ID;Turtles;\
LessThan;GreaterThan;Equal;NotEqual;And;Or;Not;\
Sum;Difference;Product;Quotient;Remainder;Minus;Random;Sine;Cosine;Tangent;ArcTangent;NaturalLog;Power;Pi;\
MakeVariable;Repeat;DoTimes;For;If;IfElse;MakeUserInstruction;Tell;Ask;AskWith;\
SetBackground;SetPalette;\
Command

Constant.class = interpreter.blocks.basic.ConstantBlock
Constant.args = 0
Constant.description = This has a constant value.

Variable.class = interpreter.blocks.basic.VariableBlock
Variable.args = 0
Variable.description = This is the variable value for assignment

Command.class = interpreter.blocks.basic.CommandBlock
Command.args = 0
Command.description = Any word can be a command; User commands can't reuse built-in commands

ListStart.class = interpreter.blocks.basic.ListStartBlock
ListStart.args = 1
ListStart.description = Start of a list of zero or more commands or variables

ListEnd.class = interpreter.blocks.basic.ListEndBlock
ListEnd.args = 0
ListEnd.description = End of a list of zero or more commands or variables

Forward.class = interpreter.blocks.turtleCommands.Forward
Forward.args = 1
Forward.description = Moves the turtle forward.

Backward.class = interpreter.blocks.turtleCommands.Back
Backward.args = 1
Backward.description = Moves the turtle backwards.

Left.class = interpreter.blocks.turtleCommands.Left
Left.args = 1
Left.description = Turns the turtle left by x degrees

Right.class = interpreter.blocks.turtleCommands.Right
Right.args = 1
Right.description = Turns the turtle right by x degrees

SetHeading.class = interpreter.blocks.turtleCommands.SetHeading
SetHeading.args = 1
SetHeading.description = Turns the turtle to an absolute heading and returns the number of degrees moved

SetTowards.class = interpreter.blocks.turtleCommands.Towards
SetTowards.args = 2
SetTowards.description = Turns turtle to face the point (x,y) where (0,0) is center of the screen. Returns degrees turned.

SetPosition.class = interpreter.blocks.turtleCommands.SetXY
SetPosition.args = 2
SetPosition.description = Moves turtle to an absolute screen position, where (0,0) is center. Returns distance moved.

PenDown.class = interpreter.blocks.turtleCommands.PenDown
PenDown.args = 0
PenDown.description = Puts pen down such that when the turtle moves, it leaves a trail.

PenUp.class = interpreter.blocks.turtleCommands.PenUp
PenUp.args = 0
PenUp.description = Puts pen up such that when the turtle moves, it does not leave a trail.

ShowTurtle.class = interpreter.blocks.turtleCommands.ShowTurtle
ShowTurtle.args = 0
ShowTurtle.description = Make turtle visible.

HideTurtle.class = interpreter.blocks.turtleCommands.HideTurtle
HideTurtle.args = 0
HideTurtle.description = Make turtle invisible.

Home.class = interpreter.blocks.turtleCommands.Home
Home.args = 0
Home.description = Moves turtle to the center of the screen (0,0) and returns the distance traveled.

ClearScreen.class = interpreter.blocks.turtleCommands.ClearScreen
ClearScreen.args = 0
ClearScreen.description = Erases turtle's trails and sends it to the Home position and returns the distance traveled.

SetPenColor.class = interpreter.blocks.turtleCommands.SetPenColor
SetPenColor.args = 1
SetPenColor.description = Sets color of the pen to that represented by index. Returns given index.

SetPenSize.class = interpreter.blocks.turtleCommands.SetPenSize
SetPenSize.args = 1
SetPenSize.description = Sets size of the pen to be pixels thickness. Returns given pixels.

SetShape.class = interpreter.blocks.turtleCommands.SetShape
SetShape.args = 1
SetShape.description = Sets shape of turtle to that represented by index. Returns given index.

Stamp.class = interpreter.blocks.turtleCommands.Stamp
Stamp.args = 0
Stamp.description = Draw the image of the turtle in its current settings on the workspace display. Returns the index of the turtle's image used for the stamp

ClearStamps.class = interpreter.blocks.turtleCommands.ClearStamps
ClearStamps.args = 0
ClearStamps.description = Remove all stamps that have been made. Returns 1 if there were any stamps cleared, 0 otherwise

XCoordinate.class = interpreter.blocks.turtleQueries.XCor
XCoordinate.args = 0
XCoordinate.description = Returns the turtle's X coordinate from the center of the screen

YCoordinate.class = interpreter.blocks.turtleQueries.YCor
YCoordinate.args = 0
YCoordinate.description = Returns the turtle's Y coordinate from the center of the screen

Heading.class = interpreter.blocks.turtleQueries.Heading
Heading.args = 0
Heading.description = Returns the turtle's heading in degrees

IsPenDown.class = interpreter.blocks.turtleQueries.PenDownP
IsPenDown.args = 0
IsPenDown.description = Returns 1 if the turtle's pen is showing, 0 if it is up.

IsShowing.class = interpreter.blocks.turtleQueries.ShowingP
IsShowing.args = 0
IsShowing.description = Returns 1 if turtle is showing, 0 if it is hiding

GetPenColor.class = interpreter.blocks.turtleQueries.GetPenColor
GetPenColor.args = 0
GetPenColor.description = returns turtle's current color index

GetShape.class = interpreter.blocks.turtleQueries.GetShape
GetShape.args = 0
GetShape.description = returns turtle's current shape index

ID.class = interpreter.blocks.turtleQueries.GetID
ID.args = 0
ID.description = Returns current active turtle's ID number ID values typically start at 1 and increase by 1 with\
 each new turtle created note, there is technically only one "active turtle" at any given time\
  since each command is run once for each active turtle, i.e., this value can always be used to identify the current\
 turtle running the command.
 
Turtles.class = interpreter.blocks.turtleQueries.Turtles
Turtles.args = 0
Turtles.description = returns number of turtles created so far (i.e., the ID of the last turtle)

LessThan.class = interpreter.blocks.logical.Less
LessThan.args = 2
LessThan.description = This compares two values and returns 1 if first value is less than second, and 0 otherwise.

GreaterThan.class = interpreter.blocks.logical.Greater
GreaterThan.args = 2
GreaterThan.description = This compares two values and returns 1 if first value is greater than second, and 0 otherwise.

Equal.class = interpreter.blocks.logical.Equal
Equal.args = 2
Equal.description = This compares two values and returns 1 if they are equal, and 0 otherwise

NotEqual.class = interpreter.blocks.logical.NotEqual
NotEqual.args = 2
NotEqual.description = This compares two values and returns 1 if they are not equal, and 0 otherwise

And.class = interpreter.blocks.logical.And
And.args = 2
And.description = This compares two values and returns 1 if they are both nonzero, and 0 otherwise

Or.class = interpreter.blocks.logical.Or
Or.args = 2
Or.description = This compares two values and returns 1 if either are nonzero, and 0 otherwise

Not.class = interpreter.blocks.logical.Not
Not.args = 1
Not.description = Returns 1 if input value is 0 and 0 if the input value is non-zero.

Sum.class = interpreter.blocks.math.Sum
Sum.args = 2
Sum.description = This does summing.

Difference.class = interpreter.blocks.math.Difference
Difference.args = 2
Difference.description = This does subtraction.

Product.class = interpreter.blocks.math.Product
Product.args = 2
Product.description = This does multiplication.

Quotient.class = interpreter.blocks.math.Quotient
Quotient.args = 2
Quotient.description = This does division.

Remainder.class = interpreter.blocks.math.Remainder
Remainder.args = 2
Remainder.description = This finds the remainder.

Minus.class = interpreter.blocks.math.Minus
Minus.args = 1
Minus.description = This returns the negative of a number.

Random.class = interpreter.blocks.math.Random
Random.args = 1
Random.description = This returns a random number between 0 and the number you specify.

Sine.class = interpreter.blocks.math.Sine
Sine.args = 1
Sine.description = This returns the sine of an angle IN DEGREES!

Cosine.class = interpreter.blocks.math.Cosine
Cosine.args = 1
Cosine.description = This returns the cosine of an angle IN DEGREES!

Tangent.class = interpreter.blocks.math.Tangent
Tangent.args = 1
Tangent.description = This returns the tangent of an angle IN DEGREES!

ArcTangent.class = interpreter.blocks.math.ArcTangent
ArcTangent.args = 1
ArcTangent.description = This returns the arctangent of an angle between -90 degrees and 90 degrees IN DEGREES!

ArcTangent2.class = interpreter.blocks.math.ArcTangent2
ArcTangent2.args = 2
ArcTangent2.description = This converts rectangular coordinates to polar and returns the angle IN DEGREES!

NaturalLog.class = interpreter.blocks.math.LogNatural
NaturalLog.args = 1
NaturalLog.description = Returns the natural logarithm of a number.

Power.class = interpreter.blocks.math.Power
Power.args = 2
Power.description = Returns the first number raised to the power of the second number

Pi.class = interpreter.blocks.math.Pi
Pi.args = 0
Pi.description = Returns the constant PI (3.14159265...)

MakeVariable.class = interpreter.blocks.control.MakeVariable
MakeVariable.args = 2
MakeVariable.description = Sets a value to a variable

Repeat.class = interpreter.blocks.control.Repeat
Repeat.args = 2
Repeat.description = Runs commands for each value in the specified range. Returns val of final command executed.

DoTimes.class = interpreter.blocks.control.DoTimes
DoTimes.args = 2
DoTimes.description = Do commands for each value specified in a range. Retursn val of final command executed

For.class = interpreter.blocks.control.For
For.args = 2
For.description = Runs commands for each value specified in a range, going by a specific increment

If.class = interpreter.blocks.control.If
If.args = 2
If.description = If expression is not 0, the commands given in the list is executed. Returns val of last command.

IfElse.class = interpreter.blocks.control.IfElse
IfElse.args = 3
IfElse.description = If expr is not 0, runs trueCommands, otherwise runs falseCommands in second list.

MakeUserInstruction.class = interpreter.blocks.control.MakeUserInstruction
MakeUserInstruction.args = 3
MakeUserInstruction.description = Makes user input command

Tell.class = interpreter.blocks.control.Tell
Tell.args = 1
Tell.description = sets turtles that will follow commands hereafter

Ask.class = interpreter.blocks.control.Ask
Ask.args = 2
Ask.description = tell turtles given in first list to run commands given in the second list

AskWith.class = interpreter.blocks.control.AskWith
AskWith.args = 2
AskWith.description = tell turtles matching given condition to run commands given in the second list

SetBackground.class = interpreter.blocks.display.SetBackground
SetBackground.args = 1
SetBackground.description = Sets background color of screen to that represented by index. Returns given index.

SetPalette.class = interpreter.blocks.display.SetPalette
SetPalette.args = 4
SetPalette.description = sets color corresponding at given index to given r g b color values.\
Returns given index.\
Note, color component values are nonnegative integers less than 256 specifying an amount of red, green, and blue